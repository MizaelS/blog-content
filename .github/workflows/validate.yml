name: Validate Blog Content

on:
  push:
    branches:
      - master  # Cambiar main por master
  pull_request:
    branches:
      - master  # Cambiar main por master
  pull_request_target:
    branches:
      - master  # Cambiar main por master
  pull_request_review:
    types:
      - submitted
      - edited

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          npm init -y
          npm install front-matter

      - name: Check for duplicate files
        run: |
          # Crear arrays para almacenar archivos por idioma
          declare -A es_files
          declare -A en_files
          DUPLICATES=false
          
          for file in $(find content/blogs -name '*.md'); do
            filename=$(basename "$file")
            lang_dir=$(basename $(dirname "$file"))
            
            # Verificar duplicados según el directorio de idioma
            case $lang_dir in
              "es")
                if [ "${es_files[$filename]+_}" ]; then
                  echo "ERROR: Archivo duplicado encontrado en /es/: $filename"
                  DUPLICATES=true
                else
                  es_files[$filename]=1
                fi
                ;;
              "en")
                if [ "${en_files[$filename]+_}" ]; then
                  echo "ERROR: Archivo duplicado encontrado en /en/: $filename"
                  DUPLICATES=true
                else
                  en_files[$filename]=1
                fi
                ;;
            esac
          done
          
          if [ "$DUPLICATES" = true ]; then
            exit 1
          fi

      - name: Validate Markdown files
        run: |
          for file in $(find content/blogs -name '*.md'); do
            echo "Validando $file..."
            
            # Validar estructura frontmatter con mejor manejo de errores
            node -e "
              const fm = require('front-matter');
              const fs = require('fs');
              
              try {
                const content = fs.readFileSync('$file', 'utf8');
                const parsed = fm(content);
                const attr = parsed.attributes;
                
                // Verificar campos requeridos
                const required = ['title', 'date', 'excerpt', 'authorId', 'category', 'tags'];
                let missing = required.filter(field => !attr[field]);
                
                if (missing.length > 0) {
                  console.error('ERROR en $file:');
                  console.error('Campos requeridos faltantes: ' + missing.join(', '));
                  process.exit(1);
                }

                // Verificar que authorId existe
                const authorPath = 'content/authors/' + attr.authorId + '.json';
                if (!fs.existsSync(authorPath)) {
                  console.error('ERROR en $file:');
                  console.error('El autor ' + attr.authorId + ' no existe en content/authors/');
                  process.exit(1);
                }

                console.log('✓ Validación exitosa para $file');
              } catch (error) {
                console.error('ERROR procesando $file:');
                console.error(error.message);
                process.exit(1);
              }
            "
          done

      - name: Check JSON files
        run: |
          for file in $(find content/authors -name '*.json'); do
            echo "Validating $file"
            jq empty "$file"
          done